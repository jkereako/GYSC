#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# GYSC
# swift_generator.py
#
# Created by Jeff Kereakoglow on 8/31/18.
# Copyright Â© 2018 AlexisDigital. All rights reserved.

import os
import time
from swagger import Swagger
from enum import Enum
from struct import Struct
from property import Property
from generator import Generator

# http://petstore.swagger.io/v2/swagger.json
class SwiftGenerator(Generator):
    def __init__(self, swagger):
        Generator.__init__(self, swagger)

    def generate(self):
        directory = "../contracts"

        self.mkdir(directory)

        definitions = self.swagger.parse_definitions()

        for contract in definitions:
            with open(directory + '/' + contract.name + ".swift", 'w') as file:
                
                # Doc block
                file.write("//\n")
                file.write("//  " + contract.name + ".swift\n")
                file.write("//\n")
                file.write("//  Generated by gysc on " + time.strftime("%d/%m/%y") + "\n")
                file.write("//  https://github.com/jkereako/GYSC\n")
                file.write("//\n")
                file.write("\n")
                
                # Structs
                if type(contract) is Struct:
                    file.write("struct " + contract.name + ": Codable {\n")

                    for property in contract.properties:
                        file.write("    let " + property.name + ": " + property.type + "\n")
                
                # Enums
                elif type(contract) is Enum:
                    file.write("enum " + contract.name + ": " + contract.backing_type + " {\n")

                    for case in contract.cases:
                        file.write("    case " + case + "\n")

                file.write('}')
                file.write("\n")

def main():
    try:
        swagger = Swagger("../temp/swagger.json")
        generator = SwiftGenerator(swagger)

        generator.generate()

    except ValueError:
        # TODO: Report an error to the Shell script
        print("Failed to parse the JSON file")

if __name__ == "__main__":
    main()